---

env: &env
    CARGO_INCREMENTAL: "0"
    CARGO_HOME: "/drone/src/target/tmp/cargo"
    RUST_BACKTRACE: "1"
    API_PORT: "8088"
    API_BASE_URL: "http://localhost:8088"
    CUSTOMER_IO_BASE_URL: ""
    CUSTOMER_IO_API_KEY: ""
    CUSTOMER_IO_SITE_ID: ""
    CUBE_JS_SECRET: ""
    EMAIL_TEMPLATES_TICKET_COUNT_REPORT: "CustomerIo:not-a-real-value"
    EMAIL_TEMPLATES_CUSTOM_BROADCAST: "CustomerIo:not-a-real-value"
    EMAIL_TEMPLATES_ORG_INVITE: "Sendgrid:d-19ea07c6169e4fe887b6527ef16cb1ea"
    EMAIL_TEMPLATES_PASSWORD_RESET: "Sendgrid:d-193ea5665fc54c8ca19c6325c8e46703"
    EMAIL_TEMPLATES_RESEND_DOWNLOAD_LINK: "CustomerIo:TEMPLATE_ID"
    # Globee will not allow a localhost url
    FRONT_END_URL: "https://ci-test.notreal.bigneon.com"
    BUILD_DIR: "api"
    TARI_URL: "TEST"
    COMMUNICATION_DEFAULT_SOURCE_EMAIL: "noreply@bigneon.com"
    COMMUNICATION_DEFAULT_SOURCE_PHONE: "0112223333"
    TOKEN_SECRET: travis_secret
    TOKEN_ISSUER: bg-on-travis
    STRIPE_SECRET_KEY: "sk_test_uIJ9qxcHSQmODoepmzXS3U6A00fRLldV6h"
    SENDGRID_API_KEY: " "
    SENDGRID_TEMPLATE_BN_REFUND: "d-9ba23272db854578a5609e4e4c608f9f"
    SENDGRID_TEMPLATE_BN_USER_REGISTERED: "d-9ba23272db854578a5609e4e4c608f9f"
    SENDGRID_TEMPLATE_BN_PURCHASE_COMPLETED: "d-c23ba549dd0749bbb3b244b758c05dd7"
    SENDGRID_TEMPLATE_BN_TRANSFER_TICKETS: "d-f6a449f0281e404899eb4d580bc342a3"
    SENDGRID_TEMPLATE_BN_USER_INVITE: "d-fcf7791b781644a8960820058c9074fd"
    SENDGRID_TEMPLATE_BN_CANCEL_TRANSFER_TICKETS: "d-665486b23965415b92f63c6ed532d93f"
    SENDGRID_TEMPLATE_BN_CANCEL_TRANSFER_TICKETS_RECEIPT: "d-5328ce5ed3ee432aac5a89ccd17340b5"
    SENDGRID_TEMPLATE_BN_TRANSFER_TICKETS_DRIP: "d-7209c990c99945ea88738dddf3463eb1"
    SENDGRID_TEMPLATE_BN_TRANSFER_TICKETS_DRIP_DESTINATION: "d-7209c990c99945ea88738dddf3463eb1"
    SENDGRID_TEMPLATE_BN_TRANSFER_TICKETS_DRIP_SOURCE: "d-1ad9cf474ee945f1a00f3534f41b6f8b"
    SENDGRID_TEMPLATE_BN_TRANSFER_TICKETS_RECEIPT: "d-3b5d9abc10ea41449b045eca7d1e31df"
    SENDGRID_TEMPLATE_BN_EVENT_UPCOMING_DRIP: "d-3b5d9abc10ea41449b045eca7d1e31df"
    SENDGRID_TEMPLATE_BN_EVENT_POST_PROMO_DRIP: "d-3b5d9abc10ea41449b045eca7d1e31df"
    HTTP_KEEP_ALIVE: 75
    BLOCK_EXTERNAL_COMMS: 1
    TWILIO_ACCOUNT_ID: " "
    TWILIO_API_KEY: " "
    API_KEYS_ENCRYPTION_KEY: "test_key"
    GLOBEE_API_KEY: "GDFOzMkPAw79a8TCAHKkiknJB6bEYgbb"
    GLOBEE_BASE_URL: "https://test.globee.com/payment-api/v1/"
    VALIDATE_IPNS: false
    CONNECTION_POOL_MAX: 20
    CONNECTION_POOL_MIN: 1
    BRANCH_IO_BRANCH_KEY:
        from_secret: BRANCH_IO_BRANCH_KEY

kind: pipeline
name: Build

steps:
    # This check is done on another build for event:push
    -   name: rust-fmt-check
        depends_on:
            - clone
        image: rust:1.38.0
        commands:
            - rustup component add rustfmt
            - cargo fmt --all -- --check

    #
    #    - name: restore-cache
    #      depends_on:
    #        - clone
    #      image: plugins/s3-cache
    #      settings:
    #        restore: true
    #        endpoint: http://minio1:9000
    #        access_key:
    #            from_secret: minio_access_key_id
    #        secret_key:
    #            from_secret: minio_secret_access_key
    #        mount:
    #            - ./target
    #        fallback_path:
    #            from_secret: cache_fallback_path
    #        root: drone
    #      when:
    #          event: [pull_request, push]
    #          branch: master

    -   name: compile
        depends_on:
            - clone
        image: rust:1.38.0
        environment:
            <<: *env
            GH_USER_EMAIL: 'travis@travis-ci.org'
            GH_USER_NAME: 'Travis CI'
            GITHUB_SSH_KEY:
                from_secret: github_deploy_key
            GITHUB_RELEASE_SSH_KEY:
                from_secret: github_release_ssh_key
        commands:
            - cargo build --release --bins
            - test -x target/release/server
            - test -x target/release/bndb_cli
            - test -x target/release/api-cli
        when:
            event: [pull_request, push]
            branch: [master, develop]

    -   name: store-executable
        depends_on:
            - compile
        image: sdbondi/git-ssh-client:0.2-alpine
        environment:
            <<: *env
            GH_USER_EMAIL: 'travis@travis-ci.org'
            GH_USER_NAME: 'Travis CI'
            GITHUB_RELEASE_SSH_KEY:
                from_secret: github_release_ssh_key
        commands:
            - ./scripts/push-feature-binary.sh
        when:
            event: [pull_request, push]
            branch: [master, develop]
    #    - name: rebuild-cache
    #      depends_on:
    #        - compile
    #      image: plugins/s3-cache
    #      settings:
    #        rebuild: true
    #        endpoint: http://minio1:9000
    #        access_key:
    #            from_secret: minio_access_key_id
    #        secret_key:
    #            from_secret: minio_secret_access_key
    #        mount:
    #            - ./target
    #        root: drone
    #      when:
    #        event: [pull_request, push]
    #        branch: master

    #    - name: cargo-audit
    #      depends_on:
    #        - compile
    #      image: rust:1.31.1
    #      commands:
    #        - ./scripts/run-cargo-audit.sh
    #      when:
    #        event: [pull_request, push]
    #        branch: master

    -   name: other-tests
        depends_on:
            - compile
        image: rust:1.38.0
        environment:
            <<: *env
            DATABASE_URL: postgres://app:password@database/other_tests
            READONLY_DATABASE_URL: postgres://app:password@database/other_tests
            TEST_DATABASE_URL: postgres://app:password@database/other_tests
            TEST_READONLY_DATABASE_URL: postgres://app:password@database/other_tests
            TEST_DATABASE_ADMIN_URL: postgres://app:password@database/other_tests
        commands:
            - ./scripts/run-other-tests-ci.sh
        when:
            event: [pull_request, push]
            branch: [master, develop]

    #    - name: api-tests
    #      depends_on:
    #        - compile
    #      image: rust:1.31.1
    #      environment:
    #          <<: *env
    #          DATABASE_URL: postgres://app:password@database/api_tests
    #          TEST_DATABASE_URL: postgres://app:password@database/api_tests
    #          TEST_DATABASE_ADMIN_URL: postgres://app:password@database/api_tests
    #      commands:
    #        - ./scripts/run-api-tests-ci.sh
    #      when:
    #          event: [pull_request, push]
    #          branch: master

    -   name: integration-tests
        depends_on:
            - compile
        image: sdbondi/rust-node:0.1
        environment:
            <<: *env
            DATABASE_URL: postgres://app:password@database/integration_tests
            READONLY_DATABASE_URL: postgres://app:password@database/integration_tests
            TEST_DATABASE_URL: postgres://app:password@database/integration_tests
            TEST_READONLY_DATABASE_URL: postgres://app:password@database/integration_tests
            TEST_DATABASE_ADMIN_URL: postgres://app:password@database/integration_tests
            RUST_LOG: error
        commands:
            - ./scripts/run-integration-tests-ci.sh
        when:
            event: [pull_request, push]
            branch: [master, develop]

    #    - name: publish
    #      image: plugins/ecr
    #      depends_on:
    ##        - cargo-audit
    #        - api-tests
    #        - integration-tests
    #        - other-tests
    #      settings:
    #        dockerfile: Dockerfile.drone
    #        tags:
    #          - latest
    #          - 0.2.${DRONE_BUILD_NUMBER}
    #        region:
    #            from_secret: aws_region
    #        repo:
    #            from_secret: docker_repo
    #        access_key:
    #            from_secret: aws_access_key_id
    #        secret_key:
    #            from_secret: aws_secret_access_key
    #      when:
    #        branch: master
    #        event: push

    -   name: bump-version
        depends_on:
            #        - publish
            #        - cargo-audit
            #        - api-tests
            - integration-tests
            - other-tests
        image: sdbondi/git-ssh-client:0.2-alpine
        environment:
            <<: *env
            GH_USER_EMAIL: 'travis@travis-ci.org'
            GH_USER_NAME: 'Travis CI'
            GITHUB_SSH_KEY:
                from_secret: github_deploy_key
        commands:
            - ./scripts/bump-version.sh --tag-commit
        when:
            event: push
            branch: [master, develop]

    #    - name: deploy-dev
    #      image: sdbondi/drone-lambda-trigger
    #      depends_on:
    #          - publish
    #      environment: *env
    #      settings:
    #        access_key_id:
    #            from_secret: aws_access_key_id
    #        aws_region:
    #            from_secret: aws_region
    #        secret_access_key:
    #            from_secret: aws_secret_access_key
    #        function_name:
    #            from_secret: deploy_lambda_function_name
    #        payload: |-
    #          {\\"targetName\\": \\"bn-api-staging\\", \\"tag\\": \\"$APP_VERSION\\"}
    #      when:
    #          branch: master
    #          event: push

    -   name: flush-cache
        depends_on:
            #        - deploy-dev
            - bump-version
        image: plugins/s3-cache
        settings:
            flush: true
            flush_age: 30
            endpoint: http://minio1:9000
            access_key:
                from_secret: minio_access_key_id
            secret_key:
                from_secret: minio_secret_access_key
            mount:
                - ./target
            root: drone
        when:
            event: [pull_request, push]
            branch: [master, develop]

    -   name: notify
        image: plugins/slack
        depends_on:
            - other-tests
            #        - api-tests
            - integration-tests
        settings:
            webhook:
                from_secret: nomatter_webhook
            username: drone
            icon_emoji: drone
            channel: tari-natterbot
        when:
            status: [ success, failure ]
        template: >
            {{#success build.status}}
              {{repo.name}} ({{build.branch}}) <{{ build.link }}|{{ repo.owner }}/{{ repo.name }}#{{truncate build.commit 8}}> build succeeded on {{uppercasefirst build.event}}. Good job {{ build.author }}.
            {{else}}
              {{repo.name}} ({{build.branch}}) <{{ build.link }}|{{ repo.owner }}/{{ repo.name }}#{{truncate build.commit 8}}> build failed on {{uppercasefirst build.event}}. Fix me please {{ build.author }}.
            {{/success}}

services:
    -   name: database
        image: postgres:10.4
        environment:
            POSTGRES_USER: app
            POSTGRES_PASSWORD: password
        when:
            event: [pull_request, push]
            branch: [master, develop]


---
kind: signature
hmac: e634538f203338f780d9c88a1ba8c2c0f8a54c2de71844adc9984f9f3d83a3db

...
